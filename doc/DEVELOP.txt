--------------------------------------
 QUICKJAVA v0.8.0 - DEVELOPMENT GUIDE
--------------------------------------

0)INTRO
  This document explain how work Quickjava and how you can extend
  libraries with a custom statements. Quickjava can be extended 

1)HOW DOES IT WORK?
  Quickjava includes jtiny, a java preprocessor, that translate 
  quickjava source code to java sources. In 2nd step the java 
  sources will be compiled by java compiler (usually javac) into 
  .class file and by jar generating Main.jar "executable" by jvm.
  
  Sometimes in the qj sources you can see the "external" statement.
  This isn't a java statement but it's amacro used by Jtiny to load 
  code from external file, like #include in C and C++ languages. 
  Example:
  
  external my_functions.java;
  
  jtiny replace this statement with (quickjava) statements present 
  into my_function.java file. If my_function.java file won't found,
  Jtiny abort translating and GNU Make abort compilation with error.
  Next step is formatting java source code (in jsrc directory) 
  generated by Jtiny with Astyle formatter present in the tools/ 
  directory, launching javac compiler to make .class files.
  The last step is generating Main.jar file (in build/ directory)
  with jar from class files and manifest.mf file. 
  
  1 [QJ Source] ->  2 (JTINY) ->  3 [UNFORMATTED JAVA Source] -> 
  
  -> 4 (ASTYLE) -> 5 [FORMATTED JAVA Source] -> 6 (JAVAC) ->
															 							 v
  -> 7 [CLASS FILE] -> 8 (JAR) -> 9 [MAIN.JAR]    


2) QUICKJAVA PACKAGE
 
   2.1) MAIN QUICKJAVA DIRECTORY
		- Builder: Jtiny directory.
  
		- Conf: contains configuration file, config.cfg is the
        		main configuration file. Here there are 
				environment vars used in the Makefile to build 
				projects
		   
		- Doc: quickjava documentation.
   
		- Lib: quickjava libraries (like Input) used to implements
               statements to quickjava like read input values, file
			   access, etc.. 
		       These files are java classes with static methods and 
			   static vars.
		  
		- Script: there are shell scripts used by makefile to generate, 
		          update and manage projects.
			 
        - Tools: there is external tools like astyle.
   
        - Workspace: Quickjava user projects.
   
   2.2) WORKSPACE DIRECTORY
		- build: there is Main.jar file after 'make' command
		
		- doc: empty directory. You can use to put your project 
		       documentation
		
		- lib: contains a copy of quickjava libraries explained first
		
		- jsrc: contains formatted java file ready to compile with jdk
	

3) WRITING A CUSTOM STATEMENT FOR QUICKJAVA 
    You can see lib/Input.java for example. Main quickjava class is a 
	class with public and static methods and static var. You can use 
	Eclipse to write the class.
	
	class MySetStatements
	{
	 /* static variables */
	 public static Object something;
	 
	 public static void myMethod1()
	 {
	  /* your java code */
	 }
	 
	 public static Object myMethod2()
	 {
	  /* your java code */
	  return something;
	 }
	}
	
	Save into lib/MySetStatements.java. You can use your myMethod1 into your 
	quickjava sources in this way:
	
	void main(String args)
	{
	 .....
	 MySetStatements.myMethod1();
	 .....
	}
	
	or access to "something" var in this way:
	
	void main(String args)
	{
	 Object local=MySetStatements.something;
	 .... 
	}
	
	
